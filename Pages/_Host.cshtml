@page "/"
@namespace new_assistant.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>KeyCloak Assistant</title>
    <base href="~/" />
    
    <!-- Tailwind CSS -->
    <link href="~/css/tailwind.css" rel="stylesheet" />
    
    <!-- Animation Fix CSS - Override broken scale() in animations -->
    <link href="~/css/animations-fix.css" rel="stylesheet" />
    
    <!-- Custom Scrollbar CSS -->
    <link href="~/css/scrollbar.css" rel="stylesheet" />
    
    <!-- Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />
    
    <div id="blazor-error-ui" class="fixed bottom-0 left-0 right-0 z-50 bg-red-600 text-white p-4 hidden">
        <div class="container mx-auto flex items-center justify-between">
            <div>
                <environment include="Staging,Production">
                    Произошла ошибка. Приложение может не отвечать до перезагрузки.
                </environment>
                <environment include="Development">
                    Произошла необработанная ошибка. Подробности в консоли разработчика.
                </environment>
            </div>
            <div class="flex space-x-2">
                <a href="" class="bg-red-700 hover:bg-red-800 px-4 py-2 rounded transition-colors">Перезагрузить</a>
                <button class="bg-red-700 hover:bg-red-800 px-4 py-2 rounded transition-colors" onclick="document.getElementById('blazor-error-ui').style.display='none'">Закрыть</button>
            </div>
        </div>
    </div>

    <!-- Blazor Scripts -->
    <script src="_framework/blazor.server.js"></script>
    
           <!-- Enhanced Navigation Script -->
           <script>
               // КРИТИЧЕСКОЕ ИСПРАВЛЕНИЕ: Фиксируем ширину ВСЕХ контейнеров анимации
               function fixAnimationContainerWidth() {
                   // Получаем МАКСИМАЛЬНУЮ ширину viewport (с учетом возможного скроллбара)
                   const viewportWidth = Math.max(
                       document.documentElement.clientWidth,
                       window.innerWidth || 0
                   );
                   
                   // Находим ВСЕ контейнеры с фоновой анимацией
                   const containers = [
                       document.getElementById('main-floating-background'),
                       ...document.querySelectorAll('.fixed.inset-0.overflow-hidden.pointer-events-none.z-0')
                   ].filter(el => el !== null);
                   
                   console.log(`[Animation Fix] Found ${containers.length} animation containers`);
                   
                   containers.forEach((container, index) => {
                       // Устанавливаем ФИКСИРОВАННУЮ ширину в пикселях
                       container.style.width = viewportWidth + 'px';
                       container.style.maxWidth = viewportWidth + 'px';
                       container.style.left = '0';
                       container.style.right = 'auto';
                       
                       console.log(`[Animation Fix] Container ${index + 1} width fixed to ${viewportWidth}px`);
                   });
               }
               
               // Вызываем при загрузке DOM
               document.addEventListener('DOMContentLoaded', fixAnimationContainerWidth);
               
               // Вызываем после каждого Blazor рендера
               if (typeof Blazor !== 'undefined') {
                   Blazor.addEventListener('enhancedload', fixAnimationContainerWidth);
               }
               
               // Настройка плавных переходов
               Blazor.addEventListener('enhancedload', function () {
                   // Добавляем класс для плавного появления
                   const mainContent = document.querySelector('main');
                   if (mainContent) {
                       mainContent.classList.add('page-transition-enter');
                       setTimeout(() => {
                           mainContent.classList.remove('page-transition-enter');
                       }, 400);
                   }
                   
                   // Добавляем анимацию для всех элементов с классом animate-stagger
                   const staggerElements = document.querySelectorAll('.animate-stagger');
                   staggerElements.forEach((element, index) => {
                       element.style.opacity = '0';
                       setTimeout(() => {
                           element.style.opacity = '1';
                       }, 50 + (index * 50));
                   });
               });

               // Обработка начала навигации
               Blazor.addEventListener('enhancedloadstart', function () {
                   const mainContent = document.querySelector('main');
                   if (mainContent) {
                       mainContent.classList.add('page-transition-exit');
                   }
                   
                   // Скрываем элементы перед переходом
                   const staggerElements = document.querySelectorAll('.animate-stagger');
                   staggerElements.forEach(element => {
                       element.style.opacity = '0';
                   });
               });

               // Плавная прокрутка к началу страницы при навигации
               Blazor.addEventListener('enhancedload', function () {
                   setTimeout(() => {
                       window.scrollTo({
                           top: 0,
                           behavior: 'smooth'
                       });
                   }, 50);
               });
               
               // Функция для переключения видимости пароля
               window.togglePasswordVisibility = function(inputId) {
                   const input = document.getElementById(inputId);
                   if (input) {
                       input.type = input.type === 'password' ? 'text' : 'password';
                   }
               };
           </script>
</body>
</html>
