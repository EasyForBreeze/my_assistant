@page "/admin/clients"
@using new_assistant.Core.Interfaces
@using new_assistant.Core.DTOs
@using Microsoft.AspNetCore.Authorization
@using System.Linq
@inject IUserRoleService UserRoleService
@inject IKeycloakAdminService KeycloakAdminService
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

<PageTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ - KeyCloak Assistant</PageTitle>

@{
    var isAuthenticated = HttpContextAccessor.HttpContext?.User?.Identity?.IsAuthenticated == true;
    
    if (!isAuthenticated)
    {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ Keycloak
        Navigation.NavigateTo("/api/auth/login", forceLoad: true);
        return;
    }
    
    if (!UserRoleService.IsAdmin())
    {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        Navigation.NavigateTo("/", forceLoad: true);
        return;
    }
}

<!-- Hero Section -->
<div id="admin-hero-section" class="mb-8 animate-stagger">
    <div class="flex items-center justify-between">
        <div id="admin-hero-content">
            <h1 id="admin-page-title" class="text-4xl font-bold gradient-text mb-2">
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º–∏
            </h1>
            <p id="admin-page-description" class="text-gray-400 text-lg">–ü–æ–∏—Å–∫ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º–∏ Keycloak –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –≤–æ –≤—Å–µ—Ö —Ä–µ–∞–ª–º–∞—Ö.</p>
        </div>
        <div class="flex justify-end">
            <button id="admin-create-button" class="create-client-btn">
                <div class="btn-content">
                    <div class="btn-icon">
                        <svg fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                    </div>
                    <span class="btn-text">–°–æ–∑–¥–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞</span>
                    <div class="btn-shine"></div>
                </div>
            </button>
        </div>
    </div>
</div>

<!-- Search Section - Clean Minimalist Style -->
<div id="admin-search-section" class="mb-8 animate-stagger">
    <!-- Search Container -->
    <div id="admin-search-container" class="card bg-gray-800/30 rounded-xl p-6 border border-gray-700/50 backdrop-blur-sm">
        <!-- Header -->
        <div class="flex items-center justify-between mb-4">
            <div class="flex items-center space-x-3">
                <div class="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center">
                    <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                    </svg>
                </div>
                <div>
                    <h3 class="text-lg font-semibold text-white">–ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤</h3>
                    <p class="text-sm text-gray-400">–ü–æ –≤—Å–µ–º —Ä–µ–∞–ª–º–∞–º Keycloak</p>
                </div>
            </div>
            @if (!string.IsNullOrEmpty(searchQuery))
            {
                <button @onclick="ClearSearch" 
                        class="px-3 py-1.5 text-sm bg-red-500/20 hover:bg-red-500/30 text-red-400 hover:text-red-300 rounded-lg transition-all duration-200 flex items-center space-x-2">
                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                    </svg>
                    <span>–û—á–∏—Å—Ç–∏—Ç—å</span>
                </button>
            }
        </div>
        
        <!-- Search Input -->
        <div class="relative">
            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <svg class="h-4 w-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
            <input type="text" 
                   @bind="searchQuery" 
                   @onkeydown="HandleKeyDown"
                   @oninput="HandleInput"
                   placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞..."
                   class="w-full pl-10 pr-4 py-3 bg-gray-700/50 border border-gray-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500/50 transition-all duration-200">
        </div>
        
    </div>
</div>


<!-- Search Results -->
@if (isSearching || (!string.IsNullOrEmpty(searchQuery) && (searchResponse?.Clients?.Any() == true || progress?.Status != null)))
{
    <div class="card animate-stagger p-6" id="admin-search-results-section">
        <div class="mb-6">
            <h3 class="text-xl font-semibold text-white">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</h3>
            @if (searchResponse != null && searchResponse.Status == SearchStatus.Completed)
            {
                <p class="text-sm text-gray-400 mt-1">–ù–∞–π–¥–µ–Ω–æ @searchResponse.TotalFound –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ @searchResponse.SearchTime.TotalMilliseconds.ToString("F0")–º—Å</p>
            }
        </div>
        
        <!-- Table -->
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead>
                    <tr class="border-b border-gray-700">
                        <th class="text-left py-3 px-4 text-gray-300 font-medium">–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                        <th class="text-left py-3 px-4 text-gray-300 font-medium">–†–µ–∞–ª–º</th>
                        <th class="text-left py-3 px-4 text-gray-300 font-medium">–¢–∏–ø</th>
                        <th class="text-left py-3 px-4 text-gray-300 font-medium">–°—Ç–∞—Ç—É—Å</th>
                        <th class="text-left py-3 px-4 text-gray-300 font-medium">–°–æ–∑–¥–∞–Ω</th>
                        <th class="text-left py-3 px-4 text-gray-300 font-medium">–î–µ–π—Å—Ç–≤–∏—è</th>
                    </tr>
                </thead>
                <tbody>
                    @if (isSearching)
                    {
                        <!-- –ü–æ–∏—Å–∫ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ -->
                        <tr>
                            <td colspan="6" class="py-12 text-center">
                                <div class="text-gray-400">
                                    <div class="search-progress-container">
                                        <svg class="w-8 h-8 mx-auto mb-4 text-blue-400 animate-spin" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                        </svg>
                                        <h3 class="text-xl font-semibold mb-2">@(progress?.Status ?? "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")</h3>
                                        @if (progress != null)
                                        {
                                            <div class="space-y-2 max-w-md mx-auto">
                                                <div class="progress-bar-container">
                                                    <div class="progress-bar-track bg-gray-700 rounded-full h-2">
                                                        <div class="progress-bar-fill bg-blue-500 h-2 rounded-full transition-all duration-300" style="width: @progress.Percentage%"></div>
                                                    </div>
                                                    <div class="text-sm text-gray-400">@progress.CompletedRealms –∏–∑ @progress.TotalRealms —Ä–µ–∞–ª–º–æ–≤</div>
                                                </div>
                                                @if (!string.IsNullOrEmpty(progress.CurrentRealm))
                                                {
                                                    <div class="text-sm text-blue-400">üîç –ü–æ–∏—Å–∫ –≤ —Ä–µ–∞–ª–º–µ: @progress.CurrentRealm</div>
                                                }
                                                @if (progress.ResultsFound > 0)
                                                {
                                                    <div class="text-sm text-green-400">‚úÖ –ù–∞–π–¥–µ–Ω–æ: @progress.ResultsFound –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                                                }
                                            </div>
                                        }
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                    else if (searchResponse?.Clients?.Any() == true)
                    {
                        @foreach (var client in GetPaginatedClients())
                        {
                            <!-- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ -->
                            <tr class="border-b border-gray-800 hover:bg-gray-800/30 transition-colors">
                                <td class="py-4 px-4">
                                    <div class="flex items-center space-x-3">
                                        <div class="w-8 h-8 bg-blue-500/20 rounded-full flex items-center justify-center">
                                            <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
                                            </svg>
                                        </div>
                                        <div>
                                            <p class="text-white font-medium">@client.Name</p>
                                            <p class="text-sm text-gray-400">ID: @client.ClientId</p>
                                        </div>
                                    </div>
                                </td>
                                <td class="py-4 px-4">
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-purple-900/50 text-purple-300">
                                        @client.Realm
                                    </span>
                                </td>
                                <td class="py-4 px-4">
                                    @if (!string.IsNullOrEmpty(client.Description))
                                    {
                                        <span class="text-sm text-gray-300">@client.Description</span>
                                    }
                                    else
                                    {
                                        <span class="text-sm text-gray-500">-</span>
                                    }
                                </td>
                                <td class="py-4 px-4">
                                    <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium @(client.Enabled ? "bg-green-900/50 text-green-300" : "bg-red-900/50 text-red-300")">
                                        @(client.Enabled ? "–ê–∫—Ç–∏–≤–µ–Ω" : "–û—Ç–∫–ª—é—á–µ–Ω")
                                    </span>
                                </td>
                                <td class="py-4 px-4 text-gray-400">
                                    @if (client.LastModified != DateTime.MinValue)
                                    {
                                        @GetRelativeTimeString(client.LastModified)
                                    }
                                    else
                                    {
                                        <span class="text-gray-500">-</span>
                                    }
                                </td>
                                <td class="py-4 px-4">
                                    <div class="flex space-x-3">
                                        <button @onclick="() => ViewClient(client)" class="text-blue-400 hover:text-blue-300 p-2 rounded-md hover:bg-blue-400/10 transition-colors">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                            </svg>
                                        </button>
                                        <button @onclick="() => EditClient(client)" class="text-green-400 hover:text-green-300 p-2 rounded-md hover:bg-green-400/10 transition-colors">
                                            <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 attachment2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                    else if (!string.IsNullOrEmpty(searchQuery))
                    {
                        <tr>
                            <td colspan="6" class="py-20 text-center">
                                <div class="max-w-md mx-auto animate-stagger">
                                    <!-- No Results Icon -->
                                    <div class="relative mb-6">
                                        <div class="w-20 h-20 mx-auto bg-gradient-to-br from-orange-500/10 to-red-500/10 rounded-2xl flex items-center justify-center backdrop-blur-sm border border-orange-500/20">
                                            <svg class="w-10 h-10 text-orange-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                            </svg>
                                        </div>
                                    </div>
                                    
                                    <!-- Main Message -->
                                    <h3 class="text-2xl font-bold text-white mb-3">–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3>
                                    <p class="text-gray-400 mb-6">–ü–æ –∑–∞–ø—Ä–æ—Å—É <span class="text-orange-400 font-semibold">"@searchQuery"</span> –∫–ª–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                                    
                                    <!-- Suggestions -->
                                    <div class="bg-gray-800/30 rounded-xl p-5 border border-gray-700/50 mb-6">
                                        <h4 class="text-white font-semibold mb-3 flex items-center">
                                            <svg class="w-4 h-4 mr-2 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                                            </svg>
                                            –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å
                                        </h4>
                                        <div class="space-y-2 text-sm text-gray-300">
                                            <div class="flex items-center space-x-2">
                                                <div class="w-1.5 h-1.5 bg-blue-400 rounded-full"></div>
                                                <span>–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–ª–æ–≤–∞</span>
                                            </div>
                                            <div class="flex items-center space-x-2">
                                                <div class="w-1.5 h-1.5 bg-green-400 rounded-full"></div>
                                                <span>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è</span>
                                            </div>
                                            <div class="flex items-center space-x-2">
                                                <div class="w-1.5 h-1.5 bg-purple-400 rounded-full"></div>
                                                <span>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–∏–Ω–æ–Ω–∏–º—ã –∏–ª–∏ —á–∞—Å—Ç–∏ —Å–ª–æ–≤</span>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    <!-- Action Buttons -->
                                    <div class="flex flex-col sm:flex-row gap-3 justify-center">
                                        <button @onclick="ClearSearch" 
                                                class="px-6 py-3 bg-gray-700/50 hover:bg-gray-600/50 text-white font-medium rounded-xl transition-all duration-200 border border-gray-600 hover:border-gray-500">
                                            –û—á–∏—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫
                                        </button>
                                    </div>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        
        <!-- Pagination -->
        @if (searchResponse?.Clients?.Any() == true && GetTotalPages() > 1)
        {
            <div class="flex items-center justify-between mt-6 px-4">
                <div class="text-sm text-gray-400">
                    –ü–æ–∫–∞–∑–∞–Ω–æ @((currentPage - 1) * itemsPerPage + 1)-@(Math.Min(currentPage * itemsPerPage, searchResponse.Clients.Count)) –∏–∑ @searchResponse.Clients.Count –∫–ª–∏–µ–Ω—Ç–æ–≤
                </div>
                
                <div class="flex items-center space-x-2">
                    <!-- Previous Button -->
                    <button @onclick="() => GoToPage(currentPage - 1)" 
                            disabled="@(currentPage <= 1)"
                            class="px-3 py-2 text-sm bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-lg transition-all duration-200 border border-gray-600 hover:border-gray-500 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-700/50">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                        </svg>
                    </button>
                    
                    <!-- Page Numbers -->
                    @{
                        var totalPages = GetTotalPages();
                        var startPage = Math.Max(1, currentPage - 2);
                        var endPage = Math.Min(totalPages, currentPage + 2);
                    }
                    
                    @if (startPage > 1)
                    {
                        <button @onclick="() => GoToPage(1)" 
                                class="px-3 py-2 text-sm bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-lg transition-all duration-200 border border-gray-600 hover:border-gray-500">
                            1
                        </button>
                        @if (startPage > 2)
                        {
                            <span class="px-2 text-gray-500">...</span>
                        }
                    }
                    
                    @for (int i = startPage; i <= endPage; i++)
                    {
                        var pageNumber = i;
                        <button @onclick="() => GoToPage(pageNumber)" 
                                class="px-3 py-2 text-sm rounded-lg transition-all duration-200 border @(currentPage == pageNumber ? "bg-blue-600 text-white border-blue-500" : "bg-gray-700/50 hover:bg-gray-600/50 text-white border-gray-600 hover:border-gray-500")">
                            @pageNumber
                        </button>
                    }
                    
                    @if (endPage < totalPages)
                    {
                        @if (endPage < totalPages - 1)
                        {
                            <span class="px-2 text-gray-500">...</span>
                        }
                        <button @onclick="() => GoToPage(totalPages)" 
                                class="px-3 py-2 text-sm bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-lg transition-all duration-200 border border-gray-600 hover:border-gray-500">
                            @totalPages
                        </button>
                    }
                    
                    <!-- Next Button -->
                    <button @onclick="() => GoToPage(currentPage + 1)" 
                            disabled="@(currentPage >= GetTotalPages())"
                            class="px-3 py-2 text-sm bg-gray-700/50 hover:bg-gray-600/50 text-white rounded-lg transition-all duration-200 border border-gray-600 hover:border-gray-500 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:bg-gray-700/50">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                        </svg>
                    </button>
                </div>
            </div>
        }
    </div>
}
else
{
    <!-- Empty State - Modern Design -->
    <div class="text-center py-16 animate-stagger">
        <!-- Hero Icon -->
        <div class="relative mb-8 animate-stagger">
            <div class="w-24 h-24 mx-auto bg-gradient-to-br from-blue-500/10 via-purple-500/10 to-cyan-500/10 rounded-3xl flex items-center justify-center backdrop-blur-sm border border-gray-700/50">
                <svg class="w-12 h-12 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
            </div>
        </div>
        
        <!-- Main Content -->
        <div class="max-w-2xl mx-auto animate-stagger">
            <h2 class="text-3xl font-bold text-white mb-4 animate-stagger">–ù–∞–π–¥–∏—Ç–µ –ª—é–±–æ–π –∫–ª–∏–µ–Ω—Ç</h2>
            <p class="text-xl text-gray-400 mb-8 animate-stagger">–ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –≤—Å–µ–º —Ä–µ–∞–ª–º–∞–º Keycloak –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ</p>
            
            <!-- Feature Cards -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-8 animate-stagger">
                <div class="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50 animate-stagger">
                    <div class="w-8 h-8 bg-blue-500/20 rounded-lg flex items-center justify-center mb-3 mx-auto">
                        <svg class="w-4 h-4 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                    </div>
                    <h3 class="text-white font-semibold mb-2">–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫</h3>
                    <p class="text-sm text-gray-400">–ù–∞—Ö–æ–¥–∏—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –Ω–∞–∑–≤–∞–Ω–∏—è</p>
                </div>
                
                <div class="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50 animate-stagger">
                    <div class="w-8 h-8 bg-green-500/20 rounded-lg flex items-center justify-center mb-3 mx-auto">
                        <svg class="w-4 h-4 text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 7v10c0 2.21 3.582 4 8 4s8-1.79 8-4V7M4 7c0 2.21 3.582 4 8 4s8-1.79 8-4M4 7c0-2.21 3.582-4 8-4s8 1.79 8 4m0 5c0 2.21-3.582 4-8 4s-8-1.79-8-4"></path>
                        </svg>
                    </div>
                    <h3 class="text-white font-semibold mb-2">–í—Å–µ —Ä–µ–∞–ª–º—ã</h3>
                    <p class="text-sm text-gray-400">–ò—â–µ—Ç –≤–æ –≤—Å–µ—Ö —Ä–µ–∞–ª–º–∞—Ö –∫—Ä–æ–º–µ master</p>
                </div>
                
                <div class="bg-gray-800/30 rounded-xl p-4 border border-gray-700/50 animate-stagger">
                    <div class="w-8 h-8 bg-purple-500/20 rounded-lg flex items-center justify-center mb-3 mx-auto">
                        <svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                    </div>
                    <h3 class="text-white font-semibold mb-2">–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
                    <p class="text-sm text-gray-400">–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∞–ª–º, —Ç–∏–ø –∏ —Å—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞</p>
                </div>
            </div>
            
        </div>
    </div>
}

@code {
    private string searchQuery = string.Empty;
    private bool isSearching = false;
    private int totalClients = 0;
    private int activeClients = 0;
    private int realmsCount = 0;
    private ClientsSearchResponse? searchResponse;
    private SearchProgress? progress;
    private int currentPage = 1;
    private const int itemsPerPage = 10;

    protected override async Task OnInitializedAsync()
    {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        await LoadStatistics();
    }

    private IEnumerable<ClientSearchResult> GetPaginatedClients()
    {
        if (searchResponse?.Clients == null) return Enumerable.Empty<ClientSearchResult>();
        
        return searchResponse.Clients
            .Skip((currentPage - 1) * itemsPerPage)
            .Take(itemsPerPage);
    }

    private int GetTotalPages()
    {
        if (searchResponse?.Clients == null) return 0;
        return (int)Math.Ceiling((double)searchResponse.Clients.Count / itemsPerPage);
    }

    private void GoToPage(int page)
    {
        var totalPages = GetTotalPages();
        if (page >= 1 && page <= totalPages)
        {
            currentPage = page;
            StateHasChanged();
        }
    }

    private void HandleInput(ChangeEventArgs e)
    {
        searchQuery = e.Value?.ToString() ?? string.Empty;
        Console.WriteLine($"HandleInput called with value: '{searchQuery}'");
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        Console.WriteLine($"HandleKeyDown called: Key='{e.Key}', Code='{e.Code}', searchQuery='{searchQuery}'");
        
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(searchQuery))
        {
            Console.WriteLine("Starting search...");
            await SearchClients();
        }
    }

    private async Task SearchClients()
    {
        Console.WriteLine($"SearchClients called with query: '{searchQuery}'");
        
        if (string.IsNullOrWhiteSpace(searchQuery))
        {
            Console.WriteLine("Search cancelled: empty query");
            return;
        }

        Console.WriteLine("Setting isSearching = true");
        isSearching = true;
        searchResponse = null;
        progress = null;
        currentPage = 1; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –Ω–æ–≤–æ–º –ø–æ–∏—Å–∫–µ
        StateHasChanged();
        
        try
        {
            Console.WriteLine("Creating progress reporter...");
            var progressReporter = new Progress<SearchProgress>(p => 
            {
                Console.WriteLine($"Progress update: {p.Status}, {p.CompletedRealms}/{p.TotalRealms} realms, {p.ResultsFound} results");
                progress = p;
                StateHasChanged();
            });

            Console.WriteLine("Calling KeycloakAdminService.SearchClientsWithProgressAsync...");
            searchResponse = await KeycloakAdminService.SearchClientsWithProgressAsync(
                searchQuery.Trim(), 
                progressReporter, 
                CancellationToken.None);
                
            Console.WriteLine($"Search completed: Status={searchResponse.Status}, Results={searchResponse.TotalFound}");
        }
        catch (Exception ex)
        {
            searchResponse = new ClientsSearchResponse
            {
                Status = SearchStatus.Error,
                ErrorMessage = ex.Message
            };
        }
        finally
        {
            isSearching = false;
            StateHasChanged();
        }
    }

    private Task ClearSearch()
    {
        searchQuery = string.Empty;
        isSearching = false;
        searchResponse = null;
        progress = null;
        currentPage = 1;
        StateHasChanged();
        return Task.CompletedTask;
    }
    
    private Task ViewClient(ClientSearchResult client)
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∫–ª–∏–µ–Ω—Ç–∞
        return Task.CompletedTask;
    }
    
    private Task EditClient(ClientSearchResult client)
    {
        // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
        return Task.CompletedTask;
    }

    private Task LoadStatistics()
    {
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–µ—Ä–µ–∑ Keycloak API
        // –ü–æ–∫–∞ —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        totalClients = 47;
        activeClients = 42;
        realmsCount = 8;
        return Task.CompletedTask;
    }
    
    private string GetRelativeTimeString(DateTime dateTime)
    {
        var diff = DateTime.UtcNow - dateTime;
        
        if (diff.TotalDays >= 1)
            return $"{(int)diff.TotalDays} {GetDayWord((int)diff.TotalDays)} –Ω–∞–∑–∞–¥";
        else if (diff.TotalHours >= 1)
            return $"{(int)diff.TotalHours} {GetHourWord((int)diff.TotalHours)} –Ω–∞–∑–∞–¥";
        else if (diff.TotalMinutes >= 1)
            return $"{(int)diff.TotalMinutes} {GetMinuteWord((int)diff.TotalMinutes)} –Ω–∞–∑–∞–¥";
        else
            return "—Ç–æ–ª—å–∫–æ —á—Ç–æ";
    }
    
    private string GetDayWord(int days)
    {
        return days switch
        {
            1 => "–¥–µ–Ω—å",
            >= 2 and <= 4 => "–¥–Ω—è",
            _ => "–¥–Ω–µ–π"
        };
    }
    
    private string GetHourWord(int hours)
    {
        return hours switch
        {
            1 => "—á–∞—Å",
            >= 2 and <= 4 => "—á–∞—Å–∞",
            _ => "—á–∞—Å–æ–≤"
        };
    }
    
    private string GetMinuteWord(int minutes)
    {
        return minutes switch
        {
            1 => "–º–∏–Ω—É—Ç—É",
            >= 2 and <= 4 => "–º–∏–Ω—É—Ç—ã",
            _ => "–º–∏–Ω—É—Ç"
        };
    }
}
