<div class="group rounded-2xl border border-white/10 bg-slate-950/30 p-4 shadow-inner shadow-black/40 transition-colors duration-200 hover:border-blue-500/60">
    <div class="flex items-start justify-between gap-6">
        <div class="flex flex-1 items-start gap-3">
            <div class="flex h-10 w-10 shrink-0 items-center justify-center rounded-xl bg-gradient-to-br from-white/10 to-white/5 text-blue-200">
                @ChildContent
            </div>
            <div class="space-y-1">
                <p class="text-sm font-semibold text-slate-100">@Title</p>
                @if (!string.IsNullOrWhiteSpace(Description))
                {
                    <p class="text-xs leading-relaxed text-slate-400">@Description</p>
                }
            </div>
        </div>
        <label class="relative inline-flex h-7 w-14 cursor-pointer items-center">
            <input type="checkbox"
                   class="peer sr-only"
                   checked="@Value"
                   @onchange="OnToggle" />
            <span class="absolute inset-0 rounded-full bg-white/10 transition peer-checked:bg-blue-500/80"></span>
            <span class="absolute left-1 top-1 h-5 w-5 rounded-full bg-white shadow-md shadow-black/30 transition-all peer-checked:translate-x-7 peer-checked:bg-white"></span>
        </label>
    </div>
</div>

@code {
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public string? Description { get; set; }
    [Parameter] public bool Value { get; set; }
    [Parameter] public EventCallback<bool> ValueChanged { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private async Task OnToggle(ChangeEventArgs args)
    {
        if (args.Value is bool booleanValue)
        {
            Value = booleanValue;
        }
        else
        {
            Value = args.Value?.ToString() == "true";
        }

        await ValueChanged.InvokeAsync(Value);
    }
}
