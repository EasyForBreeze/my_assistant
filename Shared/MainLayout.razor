@inherits LayoutComponentBase
@inject IJSRuntime JS

<!-- Красивые парящие шарики -->
<div class="fixed inset-0 overflow-hidden pointer-events-none z-0">
    <!-- Основные парящие шарики -->
    @for (int i = 0; i < 18; i++)
    {
        var size = Random.Shared.Next(10, 25);
        var opacity = Random.Shared.Next(40, 70);
        var delay = Random.Shared.Next(0, 12);
        var animationType = Random.Shared.Next(0, 3);
        var animationClass = animationType switch {
            0 => "animate-float",
            1 => "animate-float-slow",
            _ => "animate-float-fast"
        };
        
        <div class="absolute rounded-full @animationClass" 
             style="left: @(Random.Shared.Next(0, 95))%; 
                    top: @(Random.Shared.Next(0, 95))%; 
                    width: @(size)px;
                    height: @(size)px;
                    background: radial-gradient(circle at 30% 30%, 
                        rgba(59, 130, 246, @(opacity/100.0)), 
                        rgba(147, 51, 234, @((opacity-15)/100.0)), 
                        rgba(59, 130, 246, @((opacity-25)/100.0)));
                    box-shadow: 0 0 @(size)px rgba(59, 130, 246, @((opacity-20)/100.0)),
                                0 0 @(size*2)px rgba(147, 51, 234, @((opacity-30)/100.0));
                    animation-delay: @(delay)s;"></div>
    }
    
    <!-- Светящиеся орбы -->
    @for (int i = 0; i < 12; i++)
    {
        var orbSize = Random.Shared.Next(15, 35);
        var orbOpacity = Random.Shared.Next(30, 60);
        var orbDelay = Random.Shared.Next(0, 18);
        
        <div class="absolute rounded-full animate-glow-pulse" 
             style="left: @(Random.Shared.Next(0, 90))%; 
                    top: @(Random.Shared.Next(0, 90))%; 
                    width: @(orbSize)px;
                    height: @(orbSize)px;
                    background: radial-gradient(circle, 
                        rgba(168, 85, 247, @(orbOpacity/100.0)) 0%, 
                        rgba(59, 130, 246, @((orbOpacity-10)/100.0)) 40%, 
                        transparent 70%);
                    box-shadow: 0 0 @(orbSize*2)px rgba(168, 85, 247, @((orbOpacity-10)/100.0)),
                                0 0 @(orbSize*3)px rgba(59, 130, 246, @((orbOpacity-20)/100.0)),
                                inset 0 0 @(orbSize/3)px rgba(255, 255, 255, 0.2);
                    animation-delay: @(orbDelay)s;"></div>
    }
    
    <!-- Дрейфующие частицы -->
    @for (int i = 0; i < 8; i++)
    {
        var driftSize = Random.Shared.Next(6, 12);
        var driftOpacity = Random.Shared.Next(40, 70);
        var driftDelay = Random.Shared.Next(0, 25);
        
        <div class="absolute rounded-full animate-drift" 
             style="top: @(Random.Shared.Next(10, 80))%; 
                    width: @(driftSize)px;
                    height: @(driftSize)px;
                    background: linear-gradient(45deg, 
                        rgba(34, 197, 94, @(driftOpacity/100.0)), 
                        rgba(59, 130, 246, @((driftOpacity-15)/100.0)));
                    box-shadow: 0 0 @(driftSize*3)px rgba(34, 197, 94, @((driftOpacity-20)/100.0)),
                                0 0 @(driftSize*5)px rgba(59, 130, 246, @((driftOpacity-30)/100.0));
                    animation-delay: @(driftDelay)s;"></div>
    }
    
    <!-- Мерцающие звездочки -->
    @for (int i = 0; i < 20; i++)
    {
        var starSize = Random.Shared.Next(3, 7);
        var starOpacity = Random.Shared.Next(50, 90);
        var starDelay = Random.Shared.Next(0, 12);
        
        <div class="absolute animate-pulse" 
             style="left: @(Random.Shared.Next(0, 98))%; 
                    top: @(Random.Shared.Next(0, 98))%; 
                    width: @(starSize)px;
                    height: @(starSize)px;
                    background: radial-gradient(circle, 
                        rgba(255, 255, 255, @(starOpacity/100.0)) 0%, 
                        rgba(59, 130, 246, @((starOpacity-20)/100.0)) 30%,
                        transparent 60%);
                    border-radius: 50%;
                    box-shadow: 0 0 @(starSize*2)px rgba(255, 255, 255, @((starOpacity-30)/100.0));
                    animation-delay: @(starDelay)s;
                    animation-duration: @(Random.Shared.Next(2, 6))s;"></div>
    }
    
    <!-- Дополнительные яркие акценты -->
    @for (int i = 0; i < 6; i++)
    {
        var accentSize = Random.Shared.Next(20, 40);
        var accentOpacity = Random.Shared.Next(20, 40);
        var accentDelay = Random.Shared.Next(0, 15);
        var accentColor = Random.Shared.Next(0, 3) switch {
            0 => "rgba(255, 0, 150", // Розовый
            1 => "rgba(0, 255, 255", // Циан
            _ => "rgba(255, 165, 0"   // Оранжевый
        };
        
        <div class="absolute rounded-full animate-glow-pulse" 
             style="left: @(Random.Shared.Next(0, 85))%; 
                    top: @(Random.Shared.Next(0, 85))%; 
                    width: @(accentSize)px;
                    height: @(accentSize)px;
                    background: radial-gradient(circle, 
                        @(accentColor), @(accentOpacity/100.0)) 0%, 
                        transparent 60%);
                    box-shadow: 0 0 @(accentSize*2)px @(accentColor), @((accentOpacity-15)/100.0)),
                                0 0 @(accentSize*4)px @(accentColor), @((accentOpacity-25)/100.0));
                    animation-delay: @(accentDelay)s;
                    animation-duration: @(Random.Shared.Next(4, 8))s;"></div>
    }
</div>

<div class="min-h-screen relative bg-plasma">
    <!-- Дополнительный темный оверлей для глубины -->
    <div class="absolute inset-0 bg-black/40"></div>
    
    <!-- Геометрические фигуры -->
    <div class="fixed inset-0 overflow-hidden pointer-events-none z-0">
        <!-- Плавающие треугольники -->
        @for (int i = 0; i < 6; i++)
        {
            var triangleSize = Random.Shared.Next(8, 18);
            var triangleOpacity = Random.Shared.Next(60, 85);
            var triangleDelay = Random.Shared.Next(0, 20);
            var triangleColor = Random.Shared.Next(0, 4) switch {
                0 => "59, 130, 246",   // Синий
                1 => "168, 85, 247",   // Фиолетовый
                2 => "34, 197, 94",    // Зеленый
                _ => "249, 115, 22"    // Оранжевый
            };
            
            <div class="absolute animate-geometric-float" 
                 style="left: @(Random.Shared.Next(5, 90))%; 
                        top: @(Random.Shared.Next(5, 90))%; 
                        width: 0;
                        height: 0;
                        border-left: @(triangleSize/2)px solid transparent;
                        border-right: @(triangleSize/2)px solid transparent;
                        border-bottom: @(triangleSize)px solid rgba(@(triangleColor), @(triangleOpacity/100.0));
                        filter: drop-shadow(0 0 @(triangleSize)px rgba(@(triangleColor), @((triangleOpacity-20)/100.0)));
                        animation-delay: @(triangleDelay)s;"></div>
        }
        
        <!-- Вращающиеся квадраты -->
        @for (int i = 0; i < 8; i++)
        {
            var squareSize = Random.Shared.Next(6, 15);
            var squareOpacity = Random.Shared.Next(70, 95);
            var squareDelay = Random.Shared.Next(0, 25);
            var squareColor = Random.Shared.Next(0, 4) switch {
                0 => "59, 130, 246",   // Синий
                1 => "168, 85, 247",   // Фиолетовый
                2 => "34, 197, 94",    // Зеленый
                _ => "249, 115, 22"    // Оранжевый
            };
            
            <div class="absolute animate-geometric-spin" 
                 style="left: @(Random.Shared.Next(0, 85))%; 
                        top: @(Random.Shared.Next(0, 85))%; 
                        width: @(squareSize)px;
                        height: @(squareSize)px;
                        background: rgba(@(squareColor), @(squareOpacity/100.0));
                        box-shadow: 0 0 @(squareSize*3)px rgba(@(squareColor), @((squareOpacity-25)/100.0)),
                                   inset 0 0 @(squareSize/3)px rgba(255, 255, 255, 0.1);
                        animation-delay: @(squareDelay)s;"></div>
        }
        
        <!-- Пульсирующие шестиугольники -->
        @for (int i = 0; i < 5; i++)
        {
            var hexSize = Random.Shared.Next(10, 20);
            var hexOpacity = Random.Shared.Next(65, 90);
            var hexDelay = Random.Shared.Next(0, 15);
            var hexColor = Random.Shared.Next(0, 4) switch {
                0 => "59, 130, 246",   // Синий
                1 => "168, 85, 247",   // Фиолетовый
                2 => "34, 197, 94",    // Зеленый
                _ => "249, 115, 22"    // Оранжевый
            };
            
            <div class="absolute animate-geometric-pulse" 
                 style="left: @(Random.Shared.Next(10, 80))%; 
                        top: @(Random.Shared.Next(10, 80))%; 
                        width: @(hexSize)px;
                        height: @(hexSize)px;
                        background: rgba(@(hexColor), @(hexOpacity/100.0));
                        clip-path: polygon(30% 0%, 70% 0%, 100% 50%, 70% 100%, 30% 100%, 0% 50%);
                        box-shadow: 0 0 @(hexSize*4)px rgba(@(hexColor), @((hexOpacity-30)/100.0));
                        animation-delay: @(hexDelay)s;"></div>
        }
        
        <!-- Медленно движущиеся ромбы -->
        @for (int i = 0; i < 7; i++)
        {
            var diamondSize = Random.Shared.Next(5, 12);
            var diamondOpacity = Random.Shared.Next(55, 80);
            var diamondDelay = Random.Shared.Next(0, 18);
            var diamondColor = Random.Shared.Next(0, 4) switch {
                0 => "59, 130, 246",   // Синий
                1 => "168, 85, 247",   // Фиолетовый
                2 => "34, 197, 94",    // Зеленый
                _ => "249, 115, 22"    // Оранжевый
            };
            
            <div class="absolute animate-geometric-float" 
                 style="left: @(Random.Shared.Next(5, 95))%; 
                        top: @(Random.Shared.Next(5, 95))%; 
                        width: @(diamondSize)px;
                        height: @(diamondSize)px;
                        background: rgba(@(diamondColor), @(diamondOpacity/100.0));
                        transform: rotate(45deg);
                        box-shadow: 0 0 @(diamondSize*5)px rgba(@(diamondColor), @((diamondOpacity-20)/100.0));
                        animation-delay: @(diamondDelay)s;"></div>
        }
    </div>
    <!-- Sidebar -->
    <div class="fixed inset-y-0 left-0 z-50 w-64 transform transition-transform duration-300 ease-in-out @(_sidebarOpen ? "translate-x-0" : "-translate-x-full") lg:translate-x-0">
        <div class="flex flex-col h-full glass">
            <!-- Logo -->
            <div class="flex items-center justify-center h-16 px-4 border-b border-gray-700/50">
                <div class="flex items-center space-x-3">
                    <div class="w-8 h-8 bg-gradient-to-br from-blue-500 to-purple-600 rounded-lg flex items-center justify-center shadow-lg">
                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 3v2m6-2v2M9 19v2m6-2v2M5 9H3m2 6H3m18-6h-2m2 6h-2M7 19h10a2 2 0 002-2V7a2 2 0 00-2-2H7a2 2 0 00-2 2v10a2 2 0 002 2zM9 9h6v6H9V9z"></path>
                        </svg>
                    </div>
                    <span class="text-xl font-bold gradient-text">KeyCloak Assistant</span>
                </div>
            </div>
            
            <!-- Navigation -->
            <nav class="flex-1 px-4 py-6 space-y-2 overflow-y-auto">
                <NavMenu />
            </nav>
            
            <!-- User Info -->
            <div class="p-4 border-t border-gray-700/50">
                <div class="flex items-center space-x-3 p-3 rounded-lg glass">
                    <div class="w-10 h-10 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center">
                        <svg class="w-6 h-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                    </div>
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-200 truncate">Администратор</p>
                        <p class="text-xs text-gray-400 truncate">admin@keycloak.local</p>
                    </div>
                    <button class="p-1 rounded-lg hover:bg-gray-700/50 transition-colors" @onclick="LogoutAsync">
                        <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1"></path>
                        </svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Mobile sidebar overlay -->
    @if (_sidebarOpen)
    {
        <div class="fixed inset-0 z-40 lg:hidden" @onclick="ToggleSidebar">
            <div class="absolute inset-0 bg-black/50 backdrop-blur-sm"></div>
        </div>
    }

    <!-- Main content -->
    <div class="lg:pl-64 relative z-10">
        <!-- Top bar -->
        <div class="sticky top-0 z-30 flex items-center justify-between h-16 px-4 glass border-b border-gray-700/50">
            <button class="lg:hidden p-2 rounded-lg hover:bg-gray-700/50 transition-colors" @onclick="ToggleSidebar">
                <svg class="w-6 h-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                </svg>
            </button>
            
            <div class="flex items-center space-x-4">
                <!-- Breadcrumb -->
                <nav class="hidden md:flex items-center space-x-2 text-sm">
                    <a href="/" class="text-gray-400 hover:text-gray-200 transition-colors">Главная</a>
                    <svg class="w-4 h-4 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                        <path fill-rule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clip-rule="evenodd"></path>
                    </svg>
                    <span class="text-gray-200">Информация о системе</span>
                </nav>
            </div>
            
            <div class="flex items-center space-x-4">
                <!-- Notifications -->
                <button class="relative p-2 rounded-lg hover:bg-gray-700/50 transition-colors">
                    <svg class="w-6 h-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 17h5l-5 5v-5z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19c-5 0-8-3-8-8s3-8 8-8 8 3 8 8-3 8-8 8z"></path>
                    </svg>
                    <span class="absolute top-1 right-1 w-2 h-2 bg-red-500 rounded-full animate-pulse"></span>
                </button>
                
                <!-- Settings -->
                <button class="p-2 rounded-lg hover:bg-gray-700/50 transition-colors">
                    <svg class="w-6 h-6 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                </button>
            </div>
        </div>
        
               <!-- Page content -->
               <main class="p-6">
                   <div class="animate-content-fade-in">
                       @Body
                   </div>
               </main>
    </div>
</div>

@code {
    private bool _sidebarOpen = false;

    private void ToggleSidebar()
    {
        _sidebarOpen = !_sidebarOpen;
    }

    private async Task LogoutAsync()
    {
        await JS.InvokeVoidAsync("location.assign", "/Account/Logout");
    }
}